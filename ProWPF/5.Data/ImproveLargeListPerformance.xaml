<Window x:Class="ProWPF.Data.ImproveLargeListPerformance"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ProWPF.Data"
        mc:Ignorable="d"
        Title="提高大列表性能" Height="450" Width="800">

    <TabControl Margin="4">
        <TabItem Header="UI虚拟化">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <TextBlock Margin="8" TextWrapping="Wrap">
                    所有WPF列表控件（继承自ItemControls的程序），包括低级的ListBox和ComboBox，更专业的ListView、TreeView以及DataGrid，都支持大列表性能增强特性。
                    <LineBreak/>
                    UI虚拟化，仅为当前显示项创建容器对象的技术。例如有50 000条记录的ListBox控件，但可见区域只能包含30条，ListBox控件只创建30个ListBoxItem对象
                    （为了确保良好的滚动性能，会增加几个ListBoxItem对象）。如果ListBox控件不支持UI虚拟化，就需要创建全部的50 000个ListBoxItem对象，这显然占用更多的内存。
                    <LineBreak/>
                    UI虚拟化被硬编码到VitualizingStackPanel容器，除增强虚拟化支持，该面板和StackPanel面板功能类似。
                    ListBox、ListView以及DataGrid都自动使用VirtualizingStackPanel面板来布局它们的子元素。而ComboBox类使用了标准的StackPanel面板，如果需要虚拟化
                    就必须明确地提供新的ItemsPanelTemplate来添加虚拟化支持。
                    <LineBreak/>
                    TreeView是另一个支持虚拟化的控件，但在默认情况下关闭了该功能。可通过VisualizingStackPanel.IsVirtualizing="True"开启。
                    <LineBreak/>
                    <LineBreak/>
                    以下几种情况会破坏UI虚拟化：
                    <LineBreak/>
                    1.在ScrollViewer中放置列表控件。ScrollViewer为其子内容提供了“无尽的空间”，在这个空间中ListBox以完整的尺寸渲染自身，显示所有的子项，没项在内存中都有各自
                    的ListBoxItem对象。只需将ListBox放置在限制其尺寸的容器中（如Grid）就不会发生类似问题。StackPanel不会限制空间，所以也会破坏UI虚拟化。
                    <LineBreak/>
                    2.改变列表控件的模板并且没有使用ItemsPresenter。ItemPresenter使用ItemPanelPresenter，该模板指定了VirtualizingStackPanel面板。如果破坏了这种关系或
                    自己改变了ItemPresenterTemplate，从而不使用VirtualizingStackPanel面板，将会失去虚拟化特性。
                    <LineBreak/>
                    3.不使用数据绑定。如果通过编程填充列表--动态创建ListBoxItem对象，则不会发生虚拟化。
                </TextBlock>

                <ComboBox Grid.Row="1" SelectedIndex="0" HorizontalAlignment="Center" Padding="16,4" Margin="8">
                    <ComboBox.ItemsPanel>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </ComboBox.ItemsPanel>
                    <ComboBoxItem>选项1</ComboBoxItem>
                    <ComboBoxItem>选项2</ComboBoxItem>
                    <ComboBoxItem>选项3</ComboBoxItem>
                </ComboBox>

                <TreeView Grid.Row="2" HorizontalAlignment="Center" VirtualizingStackPanel.IsVirtualizing="True" Padding="16,4" Margin="8">
                    <TreeViewItem Header="节点1">节点1</TreeViewItem>
                    <TreeViewItem Header="节点2">节点2</TreeViewItem>
                    <TreeViewItem Header="节点3">节点3</TreeViewItem>
                </TreeView>
            </Grid>
        </TabItem>

        <TabItem Header="项容器再循环">
            <TextBlock Margin="8" TextWrapping="Wrap">
                通常当滚动支持虚拟化列表时，控件不断地重复创建新的项容器对象以保存新的可见项。例如，当在具有50 000个项的ListBox控件中滚动时，
                ListBox控件将生成新的ListBoxItem对象。如果启用了项容器再循环，ListBox控件将只保持少量ListBoxItem对象存活，并当滚动时通过新数据加载这些ListBoxItem对象，从而重复的使用它们。
                <LineBreak/>
                &lt;ListBox VirtualizingStackPanel.VirtualizationMode="Recycling" ...&gt;
                <LineBreak/>
                项容器再循环提高了滚动性能，降低了内存消耗量，因为垃圾收集器不需要再查找旧的项对象并释放它们。
                除DataGrid控件之外的所有控件，该特性是默认禁用的。
                <LineBreak/>
                <LineBreak/>
                缓存长度
                <LineBreak/>
                VirtualizingStackPanel创建了几个超过其显示范围的附加项。这样，再开始滚动时，可立即显示这些项。
                使用CacheLentght和CacheLengthUnit这两个VirtualizingStackPanel属性进行调整。
                <LineBreak/>
                在当前可见项之前后之后存储项的附加页：&lt;ListBox VirtualizingStackPanel.CacheLength="1" VirtualizingStackPanel.CacheLengthUnit="Page" /&gt;
                <LineBreak/>
                在当前可见项之前后之后存储100项：&lt;ListBox VirtualizingStackPanel.CacheLength="100" VirtualizingStackPanel.CacheLengthUnit="Item" /&gt;
                <LineBreak/>
                在当前可见项之前存储100项，当前可见项之后存储500项（大部分使用向后滚动）：&lt;ListBox VirtualizingStackPanel.CacheLength="100, 500" VirtualizingStackPanel.CacheLengthUnit="Item" /&gt;
                <LineBreak/>
                附加项的缓存用背景来填充。这意味着，VirtualizingStackPanel将立即显示创建的可见项集。此后，VirtualizingStackPanel将开始在优先级较低的后台线程上填充缓存，因此，不能锁定应用程序。
            </TextBlock>
        </TabItem>

        <TabItem Header="延迟滚动">
            <TextBlock Margin="8" TextWrapping="Wrap">
                为进一步提高滚动性能，可开启延迟滚动特性(deferred scrolling)。使用延迟滚动特性，当用户在滚动条上拖动滚动条时不会更新列表显示，只用当用户释放了滚动滑块时才刷新。
                <LineBreak/>
                &lt;ListBox ScrollViewer.IsDeferredScrollingEnabled="True"/&gt;
                <LineBreak/>
                基于项的滚动，VirtualizingStackPanel.ScrollUnit="Item"。面板上至少会滚动一个完整项。滚动更清晰，始终可以看到项的全部内容。
                <LineBreak/>
                基于像素滚动，VirtualizingStackPanel.ScrollUnit="Pixel"。滚动更流畅，允许使用较小的滚动间隔。
            </TextBlock>
        </TabItem>
    </TabControl>
</Window>
