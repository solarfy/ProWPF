<Window x:Class="ProWPF.Data.DataValidation"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ProWPF.Data"
        mc:Ignorable="d"
        Title="数据验证" Height="550" Width="800" Loaded="Window_Loaded">

    <Window.Resources>
        <local:PositivePriceRule x:Key="PositivePriceRule"/>
        <local:NoBlankProductRule x:Key="NoBlankProductRule"/>
    </Window.Resources>
    
    <TabControl>
        <TabItem Header="数据验证">
            <TextBlock Margin="8" TextWrapping="Wrap">
                捕获非法数值并拒绝这些非法数值的逻辑。WPF中提供了两种方法用于捕获非法值。
                <LineBreak/>
                1.在数据对象中引发错误。在属性设置器中(set语句)抛出异常，通常WPF会忽略在属性设置器中异常，但可以进行配置，从而显示更有帮助的可视化指示。
                另一种选择是在自定义的数据类中实现INotifyDataErrorInfo或IDataErrorInfo接口，从而得到指示错误的功能而不抛出异常。
                <LineBreak/>
                2.在绑定级别上定义验证。不需要考虑是哪个输入控件，可使用相同的验证。
                <LineBreak/>
                只有当来自目标的值正被用于更新源时才会验证，也就是当使用TwoWay或OneWayToSource时才会应用验证。
                <LineBreak/>
                <LineBreak/>
                <Run Foreground="Red">ExceptionValidationRule验证规则。是预先构建的验证规则，它向WPF报告所有的异常。要使用ExceptionValidationRule验证规则，必须将其放置在Binding.ValidationRules集合中。</Run> 
                <LineBreak/>
                ExceptionValidationRule它能捕获在任何位置发生的异常，当编辑的值不能转成正确的数据类型、属性设置器抛出的异常、值转换器抛出的异常。
                <LineBreak/>
                对于每个失败的验证规则，System.Windows.Control.Validation类的附加属性记录下了验证规则，采用以下三个步骤：
                <LineBreak/>
                1.在绑定的元素上，将Validation.HasError附加属性设置为true。
                <LineBreak/>
                2.创建包含细节的ValidationError对象(ValidationRule.Validate()方法的返回值)，并将该对象添加到关联的Validation.Errors集合中。
                <LineBreak/>
                3.如果Binding.NotifyOnValidationError属性被设置为true，WPF就在元素上引发Validation.Error附加事件。
                <LineBreak/>
                当发生错误时，绑定控件的外观也会发生变化。当控件的Validation.HasError属性被设置True时，WPF自动将控件使用的模板切换为由Validation.ErrorTemplate附加属性定义的模板。
                <LineBreak/>                
                <LineBreak/>
            </TextBlock>
        </TabItem>

        <TabItem Header="异常处理">
            <Grid x:Name="gridProduct">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <GroupBox Grid.Row="0" Header="ExceptionValidationRule" Margin="8">
                    <StackPanel>
                        <TextBlock Margin="4">
                            产品单价：<Run Foreground="Silver">（大于0）</Run>
                        </TextBlock>
                        <TextBox Margin="4" Validation.Error="UnitCost_Error">
                            <TextBox.Text>
                                <Binding Path="UnitCost" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                                    <Binding.ValidationRules>
                                        <ExceptionValidationRule/>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>
                        <TextBlock x:Name="txtblkUnitCostError" Margin="4" Foreground="Red"/>
                    </StackPanel>
                </GroupBox>

                <GroupBox Grid.Row="1" Header="INotifyDataErrorInfo接口" Margin="8">
                    <StackPanel>
                        <TextBlock Margin="4">
                            产品型号：<Run Foreground="Silver">（包含字母和数字，不能使用标点符号、空格以及其它特殊字符）</Run>
                        </TextBlock>
                        <!--为告知WPF使用INotifyDataErrorInfo接口，并通过该接口在修改属性时检查错误，需将ValidatesOnNotifyDataError设置为True-->
                        <!--此处需将TextBox的UpdateSourceTrigger触发方式改为PropertyChanged，否则只有当失去焦点时才会引发属性变化-->
                        <TextBox Margin="4"
                             Text="{Binding Path=ModelNumber, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True, NotifyOnValidationError=True}"
                             Validation.Error="ModelNumber_Error"/>
                        <TextBlock x:Name="texblkModleNumberError" Margin="4" Foreground="Red"/>
                    </StackPanel>
                </GroupBox>

                <GroupBox Grid.Row="2" Header="自定义验证规则" Margin="8">
                    <StackPanel>
                        <TextBlock TextWrapping="Wrap" Margin="4">
                            自定义验证规则与自定义转换器的方法类似。该方法定义继承自System.Windows.Controls.ValidationRule类，并为了执行验证而重写Validate()方法。
                        </TextBlock>
                        <TextBlock Margin="4">
                            产品单价：<Run Foreground="Silver">(0 - 999）</Run>
                        </TextBlock>
                        <TextBox Margin="4">
                            <TextBox.Text>
                                <Binding Path="UnitCost" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                    <Binding.ValidationRules>
                                        <local:PositivePriceRule Min="0" Max="999"/>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>
                    </StackPanel>
                </GroupBox>

                <GroupBox Grid.Row="3" Header="获取错误列表" Margin="8">
                    <StackPanel>
                        <Button Content="GET" Click="GetErrors_Click" HorizontalAlignment="Left" Padding="16,4" Margin="4"/>
                        <TextBlock x:Name="txtblkErrors" Margin="4"/>
                    </StackPanel>
                </GroupBox>
            </Grid>
        </TabItem>

        <TabItem Header="错误模板">
            <Grid>
                <Grid.Resources>
                    <Style TargetType="TextBox">
                        <Setter Property="Validation.ErrorTemplate">
                            <Setter.Value>
                                <ControlTemplate>
                                    <StackPanel>
                                        <Border BorderThickness="1" BorderBrush="Green">
                                            <!--装饰元素占位符代表控件自身-->                                            
                                            <AdornedElementPlaceholder x:Name="adornedElement"/>
                                        </Border>
                                        <TextBlock Margin="0,4,0,0" Foreground="Green"
                                                   Text="{Binding ElementName=adornedElement, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
                                    </StackPanel>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="Validation.HasError" Value="True">
                                <Setter Property="ToolTip" 
                                        Value="{Binding RelativeSource={RelativeSource self}, Path=(Validation.Errors)[0].ErrorContent}">
                                </Setter>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Resources>

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <TextBlock Margin="8" TextWrapping="Wrap">
                    错误模板使用的装饰层，装饰层位于普通窗口内容之上的绘图层。使用装饰层，可添加可视化装饰来指示错误，而不用替换控件背后的控件模板或改变窗口的布局。
                    <LineBreak/>
                    AdornedElementPlaceholder 装饰元素占位符，代表控件本身。
                    <LineBreak/>
                    Text="{Binding ElementName=adornedElement, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                    <LineBreak/>
                    Value="{Binding RelativeSource={RelativeSource self}, Path=(Validation.Errors)[0].ErrorContent}"
                    <LineBreak/>
                    Validation.Errors是附加属性，需要用圆括号包围。
                </TextBlock>

                <StackPanel Grid.Row="1">
                    <TextBlock Margin="4">
                        产品单价：<Run Foreground="Silver">(0 - 999）</Run>
                    </TextBlock>
                    <TextBox x:Name="txtUnitCost" Margin="4">
                        <TextBox.Text>
                            <Binding Path="UnitCost" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                <Binding.ValidationRules>
                                    <local:PositivePriceRule Min="0" Max="999"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                </StackPanel>
            </Grid>
        </TabItem>

        <TabItem Header="多值验证">
            <Grid x:Name="gridProductDtails" TextBox.LostFocus="GridProductDtails_LostFocus">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <Grid.BindingGroup>
                    <BindingGroup x:Name="productBindingGroup">
                        <BindingGroup.ValidationRules>
                            <local:NoBlankProductRule/>
                        </BindingGroup.ValidationRules>
                    </BindingGroup>
                </Grid.BindingGroup>

                <TextBlock Margin="8" TextWrapping="Wrap">
                    使用WPF数据绑定组(Binding Group)，创建继承自ValidationRule类的自定义验证规则，但不将该规则应用于单个绑定表达式，
                    而将其附加到包含所有绑定控件的容器上（通常是设置DataContext的对象），然后提交编辑时，WPF会使用该验证规则验证整个数据对象。
                    这就是所谓的项级别验证。
                    <LineBreak/>
                    如果需要使用多个数据对象的绑定组，必须设置BindingGroup.Name属性来为绑定组提供一个描述性的名称。然后在绑定表达式子中设置BingdingGroupName属性来使它们相匹配。
                    <LineBreak/>
                    Text="{Binding Path=ModelName, BindingGroupName=MyBindingGroup}"
                    <LineBreak/>
                    绑定组使用事务处理编辑系统，必须在运行验证逻辑之前需正式的提交编辑。调用BindingGroup.CommitEdit()方法。
                    可使用单击按钮或编辑控件失去焦点时运行事件处理程序（本例中使用的是TextBox.LostFocus事件）。
                    <LineBreak/>
                    <Run Foreground="Blue" Text="如果验证失效，整个面板会被红色的边框包围。可通过修改Validation.ErrorTemplate改变外观"/>
                </TextBlock>

                <StackPanel Grid.Row="1" Margin="8">
                    <TextBlock Margin="4" Text="产品型号与产品名称不能同时为空" Foreground="Silver"/>
                    <TextBlock Margin="4" Text="产品型号："/>
                    <TextBox Margin="4" Text="{Binding Path=ModelNumber, Mode=TwoWay}"/>
                    <TextBlock Margin="4" Text="产品名称："/>
                    <TextBox Margin="4" Text="{Binding Path=ModelName, Mode=TwoWay}"/>
                </StackPanel>
            </Grid>
        </TabItem>
    </TabControl>
</Window>
