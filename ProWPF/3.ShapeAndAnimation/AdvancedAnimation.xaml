<Window x:Class="ProWPF.ShapeAndAnimation.AdvancedAnimation"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ProWPF.ShapeAndAnimation"        
        mc:Ignorable="d"
        Title="高级动画" Height="450" Width="800">

    <Window.Resources>
        <TransformGroup x:Key="Rotate">
            <RotateTransform Angle="0"/>
        </TransformGroup>

        <Style TargetType="Button" x:Key="ButtonBaseStyle">
            <Setter Property="Margin" Value="4"/>
            <Setter Property="Padding" Value="30,15"/>
        </Style>

        <Style TargetType="Button" BasedOn="{StaticResource ButtonBaseStyle}" x:Key="TransformOnRender">
            <Setter Property="RenderTransformOrigin" Value="0.5 0.5"/>
            <Setter Property="RenderTransform" Value="{StaticResource Rotate}"/>
            <Style.Triggers>
                <EventTrigger RoutedEvent="MouseEnter">
                    <BeginStoryboard>
                        <Storyboard TargetProperty="RenderTransform.Children[0].Angle">
                            <DoubleAnimation From="0" To="360" Duration="0:0:0.8" RepeatBehavior="Forever"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="MouseLeave">
                    <BeginStoryboard>
                        <Storyboard TargetProperty="RenderTransform.Children[0].Angle">
                            <!--省略From和To属性，可以无缝的从当前位置将按钮旋转回原来的位置-->
                            <DoubleAnimation Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Button" BasedOn="{StaticResource ButtonBaseStyle}" x:Key="TransformOnLayout">
            <Setter Property="LayoutTransform" Value="{StaticResource Rotate}"/>
            <Style.Triggers>
                <EventTrigger RoutedEvent="MouseEnter">
                    <BeginStoryboard>
                        <Storyboard TargetProperty="LayoutTransform.Children[0].Angle">
                            <DoubleAnimation From="0" To="360" Duration="0:0:0.8" RepeatBehavior="Forever"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="MouseLeave">
                    <BeginStoryboard>
                        <Storyboard TargetProperty="LayoutTransform.Children[0].Angle">
                            <!--省略From和To属性，可以无缝的从当前位置将按钮旋转回原来的位置-->
                            <DoubleAnimation Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Button" BasedOn="{StaticResource ButtonBaseStyle}" x:Key="BlurButton">
            <Style.Setters>
                <Setter Property="Effect">
                    <Setter.Value>
                        <BlurEffect Radius="5"/>
                    </Setter.Value>
                </Setter>
            </Style.Setters>
            <Style.Triggers>
                <EventTrigger RoutedEvent="MouseEnter">
                    <BeginStoryboard>
                        <Storyboard TargetProperty="Effect.Radius">
                            <DoubleAnimation To="0" Duration="0:0:1" AccelerationRatio="1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="MouseLeave">
                    <BeginStoryboard>
                        <Storyboard TargetProperty="Effect.Radius">
                            <DoubleAnimation Duration="0:0:1" DecelerationRatio="1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Button" BasedOn="{StaticResource ButtonBaseStyle}" x:Key="ShadowButton">
            <Style.Setters>
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect Color="Transparent" ShadowDepth="0"/>
                    </Setter.Value>
                </Setter>
            </Style.Setters>
            <Style.Triggers>
                <EventTrigger RoutedEvent="MouseEnter">
                    <BeginStoryboard>
                        <Storyboard TargetProperty="Effect.Color">
                            <ColorAnimation To="Red" Duration="0:0:1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="MouseLeave">
                    <BeginStoryboard>
                        <Storyboard TargetProperty="Effect.Color">
                            <ColorAnimation Duration="0:0:1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>

        <!--飞入特效-->
        <Storyboard x:Key="SlideStoryboard">
            <!--缩放-->
            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[0].ScaleX"
                                                     From="0" To="1" Duration="0:0:2" AccelerationRatio="1"/>
            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[0].ScaleY"
                                                     From="0" To="1" Duration="0:0:2" AccelerationRatio="1"/>

            <!--旋转-->
            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[1].Angle"
                                                     From="70" To="0" Duration="0:0:2"/>

            <!--透明度-->
            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                     From="0.2" To="1" Duration="0:0:2.5"/>

            <!--触碰到边界后进行反弹-->
            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[0].ScaleX"
                                                     To="0.98" Duration="0:0:0.05" BeginTime="0:0:2" DecelerationRatio="1"/>
            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[0].ScaleY"
                                                     To="0.98" Duration="0:0:0.05" BeginTime="0:0:2" DecelerationRatio="1"/>

            <!--反弹之后回正-->
            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[0].ScaleX"
                                                     To="1" Duration="0:0:0.2" BeginTime="0:0:2.05" AccelerationRatio="1"/>
            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Children[0].ScaleY"
                                                     To="1" Duration="0:0:0.2" BeginTime="0:0:2.05" AccelerationRatio="1"/>
        </Storyboard>

        <!--使用非共享资源，每个资源都有单独的实例，可在多个FlowDocumentScrollViewer中使用-->
        <FlowDocument x:Key="Document" x:Shared="False">
            <Paragraph xml:space="preserve">The <Italic>foof</Italic> feature is indispensable. You can configure the foof feature using the Foof Options dialog box.</Paragraph>
            <BlockUIContainer>
                <Button HorizontalAlignment="Left" Padding="5">Open Foof Options</Button>
            </BlockUIContainer>

            <Paragraph FontSize="20pt">Largest Cities in the Year 100</Paragraph>
            <Table>
                <Table.Columns>
                    <TableColumn Width="*"></TableColumn>
                    <TableColumn Width="3*"></TableColumn>
                    <TableColumn Width="*"></TableColumn>
                </Table.Columns>

                <TableRowGroup  >
                    <TableRow FontWeight="Bold" >
                        <TableCell >
                            <Paragraph>Rank</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>Name</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>Population</Paragraph>
                        </TableCell>
                    </TableRow>
                    <TableRow>
                        <TableCell>
                            <Paragraph>1</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>Rome</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>450,000</Paragraph>
                        </TableCell>
                    </TableRow>
                    <TableRow>
                        <TableCell>
                            <Paragraph>2</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>Luoyang (Honan), China</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>420,000</Paragraph>
                        </TableCell>
                    </TableRow>
                    <TableRow>
                        <TableCell>
                            <Paragraph>3</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>Seleucia (on the Tigris), Iraq</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>250,000</Paragraph>
                        </TableCell>
                    </TableRow>
                    <TableRow>
                        <TableCell>
                            <Paragraph>4</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>Alexandria, Egypt</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>250,000</Paragraph>
                        </TableCell>
                    </TableRow>
                    <TableRow>
                        <TableCell>
                            <Paragraph>5</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>Antioch, Turkey</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>150,000</Paragraph>
                        </TableCell>
                    </TableRow>
                    <TableRow>
                        <TableCell>
                            <Paragraph>6</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>Anuradhapura, Sri Lanka</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>130,000</Paragraph>
                        </TableCell>
                    </TableRow>
                    <TableRow>
                        <TableCell>
                            <Paragraph>7</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>Peshawar, Pakistan</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>120,000</Paragraph>
                        </TableCell>
                    </TableRow>
                    <TableRow>
                        <TableCell>
                            <Paragraph>8</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>Carthage, Tunisia</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>100,000</Paragraph>
                        </TableCell>
                    </TableRow>
                    <TableRow>
                        <TableCell>
                            <Paragraph>9</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>Suzhou, China</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>n/a</Paragraph>
                        </TableCell>
                    </TableRow>
                    <TableRow>
                        <TableCell>
                            <Paragraph>10</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>Smyrna, Turkey</Paragraph>
                        </TableCell>
                        <TableCell>
                            <Paragraph>90,000</Paragraph>
                        </TableCell>
                    </TableRow>
                </TableRowGroup>
            </Table>
        </FlowDocument>

        <PathGeometry x:Key="LeafPath">
            <PathFigure IsClosed="False" StartPoint="200 200">
                <BezierSegment Point1="0 0" Point2="0 400" Point3="200 200"/>
                <BezierSegment Point1="400 0" Point2="400 400" Point3="200 200"/>
                <BezierSegment Point1="0 0" Point2="400 0" Point3="200 200"/>
                <LineSegment Point="200, 280"/>
                <ArcSegment Point="140 280" Size="25 30" SweepDirection="Counterclockwise"/>
                <ArcSegment Point="260 280" Size="20 25"/>
                <ArcSegment Point="200 280" Size="25 30"/>
            </PathFigure>
        </PathGeometry>
    </Window.Resources>

    <Window.Triggers>
        <EventTrigger RoutedEvent="Button.Click" SourceName="btnPlayer">
            <BeginStoryboard>
                <Storyboard SpeedRatio="1.5" TargetName="border">
                    <StaticResource ResourceKey="SlideStoryboard"/>
                </Storyboard>
            </BeginStoryboard>
        </EventTrigger>

        <EventTrigger RoutedEvent="Button.Click" SourceName="btnPlayVisual">
            <BeginStoryboard>
                <Storyboard SpeedRatio="1.5" TargetName="rectVisual" CurrentTimeInvalidated="SlideVisual_CurrentTimeInvalidated">
                    <StaticResource ResourceKey="SlideStoryboard"/>
                </Storyboard>
            </BeginStoryboard>
        </EventTrigger>
    </Window.Triggers>

    <TabControl Margin="4">
        <TabItem Header="旋转动画">
            <DockPanel LastChildFill="True">
                <TextBlock DockPanel.Dock="Top" Margin="8">
                    RenderTransform：效率更高，因为是在布局之后应用变化并且用于变换最终的渲染输出。
                    <LineBreak/>
                    LayoutTransform：在布局之前使用变换，从而其他控件需要重新排列以适应变换。改变LayoutTransform属性会引发新的布局操作
                    （除非在Canvas面板上使用，这种情况下RenderTransform和LayoutTransform效果相同）。
                </TextBlock>

                <UniformGrid Columns="2">
                    <StackPanel Margin="8" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Button Content="One" Style="{StaticResource TransformOnRender}"/>
                        <Button Content="Two" Style="{StaticResource TransformOnRender}"/>
                        <Button Content="Three" Style="{StaticResource TransformOnRender}"/>
                        <Button Content="Four" Style="{StaticResource TransformOnRender}"/>
                    </StackPanel>

                    <StackPanel Margin="8" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Button Content="One" Style="{StaticResource TransformOnLayout}"/>
                        <Button Content="Two" Style="{StaticResource TransformOnLayout}"/>
                        <Button Content="Three" Style="{StaticResource TransformOnLayout}"/>
                        <Button Content="Four" Style="{StaticResource TransformOnLayout}"/>
                    </StackPanel>
                </UniformGrid>
            </DockPanel>
        </TabItem>

        <TabItem Header="组合动画">
            <DockPanel LastChildFill="True">
                <Button x:Name="btnPlayer" Content="播放" HorizontalAlignment="Left" Margin="8" Padding="20,4" DockPanel.Dock="Top"/>

                <Border x:Name="border" Margin="3" Background="LightGoldenrodYellow" BorderBrush="DarkBlue" BorderThickness="2" CornerRadius="5" >
                    <Border.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform></ScaleTransform>
                            <RotateTransform></RotateTransform>
                        </TransformGroup>
                    </Border.RenderTransform>
                    <FlowDocumentScrollViewer IsToolBarVisible="True" Document="{StaticResource Document}"/>
                </Border>
            </DockPanel>
        </TabItem>

        <TabItem Header="渐变画刷动画">
            <DockPanel LastChildFill="True">
                <TextBlock DockPanel.Dock="Top" TextWrapping="Wrap" Margin="8">
                    LinearGradientBrush和RadialGradientBrush渐变画刷都有自己的RelativeTransform属性，可使用该属性旋转、缩放、拉伸以及扭曲等变换。
                </TextBlock>

                <Ellipse Margin="5" Width="300" Height="300" VerticalAlignment="Center" HorizontalAlignment="Center">
                    <Ellipse.Fill>
                        <RadialGradientBrush GradientOrigin="0.3 0.7">
                            <RadialGradientBrush.RelativeTransform>
                                <TransformGroup>
                                    <RotateTransform Angle="10"/>
                                    <TranslateTransform X="0" Y="0"/>
                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                </TransformGroup>
                            </RadialGradientBrush.RelativeTransform>
                            <GradientStop Color="White" Offset="0"/>
                            <GradientStop Color="Blue" Offset="1"/>
                        </RadialGradientBrush>
                    </Ellipse.Fill>

                    <Ellipse.Triggers>
                        <EventTrigger RoutedEvent="Ellipse.Loaded">
                            <BeginStoryboard>
                                <Storyboard>
                                    <PointAnimation Storyboard.TargetProperty="Fill.GradientOrigin" 
                                                    From="0.3 0.7" To="0.7 0.3" AutoReverse="True" RepeatBehavior="Forever" Duration="0:0:10"/>
                                    <ColorAnimation Storyboard.TargetProperty="Fill.GradientStops[1].Color"
                                                    From="Blue" To="Black" AutoReverse="True" RepeatBehavior="Forever" Duration="0:0:10"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Ellipse.Triggers>
                </Ellipse>
            </DockPanel>
        </TabItem>

        <TabItem Header="VisualBrush动画">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <Button x:Name="btnPlayVisual" Content="播放" HorizontalAlignment="Left" Margin="8" Padding="20,4"/>

                <Border x:Name="borderDocument" Grid.Row="1" Margin="3" Background="LightBlue" BorderBrush="YellowGreen" BorderThickness="2" CornerRadius="5" >
                    <FlowDocumentScrollViewer IsToolBarVisible="True" Document="{StaticResource Document}"/>
                </Border>

                <!--矩形与原始元素中间的遮挡，动画结束后隐藏该遮挡-->
                <Rectangle x:Name="rectBlocked" Grid.Row="1" Fill="White" Visibility="Hidden"/>

                <!--将矩形与原始元素放置在同一个位置中当动画结束后隐藏该矩形-->
                <Rectangle x:Name="rectVisual" Grid.Row="1" Visibility="Hidden">
                    <Rectangle.Fill>
                        <VisualBrush Visual="{Binding ElementName=borderDocument}"/>
                    </Rectangle.Fill>
                    <Rectangle.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform></ScaleTransform>
                            <RotateTransform></RotateTransform>
                        </TransformGroup>
                    </Rectangle.RenderTransform>
                </Rectangle>
            </Grid>
        </TabItem>

        <TabItem Header="像素着色器动画">
            <UniformGrid Margin="4" Columns="2">
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                    <Button Style="{StaticResource BlurButton}" Content="One"/>
                    <Button Style="{StaticResource BlurButton}" Content="Two"/>
                    <Button Style="{StaticResource BlurButton}" Content="Three"/>
                    <Button Style="{StaticResource BlurButton}" Content="Four"/>
                </StackPanel>

                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                    <Button Style="{StaticResource ShadowButton}" Content="One"/>
                    <Button Style="{StaticResource ShadowButton}" Content="Two"/>
                    <Button Style="{StaticResource ShadowButton}" Content="Three"/>
                    <Button Style="{StaticResource ShadowButton}" Content="Four"/>
                </StackPanel>
            </UniformGrid>
        </TabItem>

        <TabItem Header="关键帧动画">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <TextBlock Margin="4" Grid.ColumnSpan="3" TextWrapping="Wrap">
                    线性关键帧使用“Linear+数据类型+KeyFrame”的形式命令；离散关键帧使用“Discrete+数据类型+KeyFrame”的形式命名。
                    <LineBreak/>
                    所有关键帧动画都支持离散关键帧动画，但只有一部分关键帧动画支持线性关键帧。支持线性关键帧的也支持线性插值，并提供相应的DataTypeAnimation类，
                    如Point、Color、以及double。不支持线性插值的包括字符串和对象。
                    <LineBreak/>
                    <Run Foreground="Red">* 可在同一关键帧动画中组合使用两种类型的关键帧--线性关键帧和离散关键帧。</Run>
                </TextBlock>

                <GroupBox Grid.Row="1" Grid.Column="0" Header="线性关键帧动画" Margin="4">
                    <Ellipse Margin="20" Stretch="Uniform">
                        <Ellipse.Fill>
                            <RadialGradientBrush GradientOrigin="0.5 0.5">
                                <GradientStop Color="YellowGreen" Offset="0"/>
                                <GradientStop Color="Transparent" Offset="1"/>
                            </RadialGradientBrush>
                        </Ellipse.Fill>
                        <Ellipse.Triggers>
                            <EventTrigger RoutedEvent="Loaded">
                                <BeginStoryboard>
                                    <Storyboard TargetProperty="Fill.GradientOrigin" RepeatBehavior="Forever">
                                        <PointAnimationUsingKeyFrames>
                                            <LinearPointKeyFrame Value="0.7 0.3" KeyTime="0:0:0"/>
                                            <LinearPointKeyFrame Value="0.3 0.7" KeyTime="0:0:5"/>
                                            <LinearPointKeyFrame Value="0.5 0.9" KeyTime="0:0:8"/>
                                            <LinearPointKeyFrame Value="0.9 0.6" KeyTime="0:0:10"/>
                                            <LinearPointKeyFrame Value="0.8 0.2" KeyTime="0:0:12"/>
                                            <LinearPointKeyFrame Value="0.7 0.3" KeyTime="0:0:14"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Ellipse.Triggers>
                    </Ellipse>
                </GroupBox>

                <GroupBox Grid.Row="1" Grid.Column="1" Header="离散关键帧动画" Margin="4">
                    <Ellipse Margin="20" Stretch="Uniform">
                        <Ellipse.Fill>
                            <RadialGradientBrush GradientOrigin="0.5 0.5">
                                <GradientStop Color="ForestGreen" Offset="0"/>
                                <GradientStop Color="Transparent" Offset="1"/>
                            </RadialGradientBrush>
                        </Ellipse.Fill>
                        <Ellipse.Triggers>
                            <EventTrigger RoutedEvent="Loaded">
                                <BeginStoryboard>
                                    <Storyboard TargetProperty="Fill.GradientOrigin" RepeatBehavior="Forever">
                                        <PointAnimationUsingKeyFrames>
                                            <DiscretePointKeyFrame Value="0.3 0.7" KeyTime="0:0:5"/>
                                            <DiscretePointKeyFrame Value="0.5 0.9" KeyTime="0:0:8"/>
                                            <DiscretePointKeyFrame Value="0.9 0.6" KeyTime="0:0:10"/>
                                            <DiscretePointKeyFrame Value="0.8 0.2" KeyTime="0:0:12"/>
                                            <DiscretePointKeyFrame Value="0.7 0.3" KeyTime="0:0:0"/>
                                            <DiscretePointKeyFrame Value="0.7 0.3" KeyTime="0:0:14"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Ellipse.Triggers>
                    </Ellipse>
                </GroupBox>

                <GroupBox Grid.Row="1" Grid.Column="2" Header="线性+离散" Margin="4">
                    <Ellipse Margin="20" Stretch="Uniform">
                        <Ellipse.Fill>
                            <RadialGradientBrush GradientOrigin="0.5 0.5">
                                <GradientStop Color="OrangeRed" Offset="0"/>
                                <GradientStop Color="Transparent" Offset="1"/>
                            </RadialGradientBrush>
                        </Ellipse.Fill>
                        <Ellipse.Triggers>
                            <EventTrigger RoutedEvent="Loaded">
                                <BeginStoryboard>
                                    <Storyboard TargetProperty="Fill.GradientOrigin" RepeatBehavior="Forever">
                                        <PointAnimationUsingKeyFrames>
                                            <DiscretePointKeyFrame Value="0.3 0.7" KeyTime="0:0:5"/>
                                            <LinearPointKeyFrame Value="0.5 0.9" KeyTime="0:0:8"/>
                                            <DiscretePointKeyFrame Value="0.9 0.6" KeyTime="0:0:10"/>
                                            <LinearPointKeyFrame Value="0.8 0.2" KeyTime="0:0:12"/>
                                            <DiscretePointKeyFrame Value="0.7 0.3" KeyTime="0:0:0"/>
                                            <LinearPointKeyFrame Value="0.7 0.3" KeyTime="0:0:14"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Ellipse.Triggers>
                    </Ellipse>
                </GroupBox>
            </Grid>
        </TabItem>

        <TabItem Header="缓动关键帧">
            <StackPanel VerticalAlignment="Center">
                <Button HorizontalAlignment="Center" VerticalAlignment="Center" Padding="40,15" Content="点击按钮 CircleEase" Margin="4">
                    <Button.Triggers>
                        <EventTrigger RoutedEvent="Button.Click">
                            <BeginStoryboard>
                                <Storyboard TargetProperty="Width">
                                    <DoubleAnimationUsingKeyFrames>
                                        <LinearDoubleKeyFrame Value="100" KeyTime="0:0:0"/>
                                        <!--缓动关键帧-->
                                        <EasingDoubleKeyFrame Value="400" KeyTime="0:0:1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <CircleEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Button.Triggers>
                </Button>

                <Button HorizontalAlignment="Center" VerticalAlignment="Center" Padding="40,15" Content="点击按钮 ElasticEase" Margin="4">
                    <Button.Triggers>
                        <EventTrigger RoutedEvent="Button.Click">
                            <BeginStoryboard>
                                <Storyboard TargetProperty="Width">
                                    <DoubleAnimationUsingKeyFrames>
                                        <LinearDoubleKeyFrame Value="100" KeyTime="0:0:0"/>
                                        <EasingDoubleKeyFrame Value="400" KeyTime="0:0:1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ElasticEase EasingMode="EaseOut"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Button.Triggers>
                </Button>

                <Button HorizontalAlignment="Center" VerticalAlignment="Center" Padding="40,15" Content="点击按钮 BackEase" Margin="4">
                    <Button.Triggers>
                        <EventTrigger RoutedEvent="Button.Click">
                            <BeginStoryboard>
                                <Storyboard TargetProperty="Width">
                                    <DoubleAnimationUsingKeyFrames>
                                        <LinearDoubleKeyFrame Value="100" KeyTime="0:0:0"/>
                                        <EasingDoubleKeyFrame Value="400" KeyTime="0:0:1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <BackEase EasingMode="EaseInOut"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Button.Triggers>
                </Button>
            </StackPanel>
        </TabItem>

        <TabItem Header="样条关键帧">
            <DockPanel LastChildFill="True">
                <TextBlock Margin="8" TextWrapping="Wrap" DockPanel.Dock="Top">
                    支持线性关键帧的类也支持样条关键帧，它们使用“Spline+数据类型+KeyFrame”的形式进行命名。
                    这种关键帧能够实现更加连贯的加速和减速以及更逼真的动画效果。
                    <LineBreak/>
                    KeySpline属性，定义能够影响插值方式的三次贝塞尔曲线（起点，终点，两个控制点）。对于样条关键帧起点总是（0，0），终点总是（1，1），
                    用户只需提供两个控制点。创建的曲线X轴描述时间，Y轴描述动画值。X值越小，同时Y值越大，动画速率就越快；同理X值越大，Y值越小，动画就越慢。
                </TextBlock>

                <UniformGrid Margin="4" Rows="3">
                    <GroupBox Header="线性插值" Margin="4">
                        <Canvas>
                            <Ellipse Width="20" Height="20" Fill="Red" Canvas.Top="20" Canvas.Left="0">
                                <Ellipse.Triggers>
                                    <EventTrigger RoutedEvent="Loaded">
                                        <BeginStoryboard>
                                            <Storyboard TargetProperty="(Canvas.Left)">
                                                <DoubleAnimation To="600" Duration="0:0:10" RepeatBehavior="Forever"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Ellipse.Triggers>
                            </Ellipse>
                        </Canvas>
                    </GroupBox>

                    <GroupBox Header="样条关键帧" Margin="4">
                        <Canvas>
                            <Ellipse Width="20" Height="20" Fill="Red" Canvas.Top="20" Canvas.Left="0">
                                <Ellipse.Triggers>
                                    <EventTrigger RoutedEvent="Loaded">
                                        <BeginStoryboard>
                                            <Storyboard TargetProperty="(Canvas.Left)">
                                                <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever">
                                                    <SplineDoubleKeyFrame KeySpline="0.25,0 0.5,0.7" KeyTime="0:0:5" Value="300" />
                                                    <SplineDoubleKeyFrame KeySpline="0.25,0.8 0.2,0.4" KeyTime="0:0:10" Value="600" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Ellipse.Triggers>
                            </Ellipse>
                        </Canvas>
                    </GroupBox>

                    <GroupBox Header="仿MS加载动画" Margin="4">
                        <Canvas ClipToBounds="True">
                            <Ellipse Width="16" Height="16" Fill="Orange" Canvas.Top="20" Canvas.Left="0">
                                <Ellipse.Triggers>
                                    <EventTrigger RoutedEvent="Loaded">
                                        <BeginStoryboard>
                                            <Storyboard TargetProperty="(Canvas.Left)">
                                                <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever">
                                                    <SplineDoubleKeyFrame KeySpline="0.1,0 0.2,0.8" KeyTime="0:0:5" Value="300" />
                                                    <SplineDoubleKeyFrame KeySpline="0.2,0.8 0.4,0.6" KeyTime="0:0:10" Value="600" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Ellipse.Triggers>
                            </Ellipse>
                            <Ellipse Width="16" Height="16" Fill="Orange" Canvas.Top="20" Canvas.Left="0">
                                <Ellipse.Triggers>
                                    <EventTrigger RoutedEvent="Loaded">
                                        <BeginStoryboard>
                                            <Storyboard TargetProperty="(Canvas.Left)">
                                                <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.2">
                                                    <SplineDoubleKeyFrame KeySpline="0.1,0 0.2,0.8" KeyTime="0:0:5" Value="300" />
                                                    <SplineDoubleKeyFrame KeySpline="0.2,0.8 0.4,0.6" KeyTime="0:0:10" Value="600" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Ellipse.Triggers>
                            </Ellipse>
                            <Ellipse Width="16" Height="16" Fill="Orange" Canvas.Top="20" Canvas.Left="0">
                                <Ellipse.Triggers>
                                    <EventTrigger RoutedEvent="Loaded">
                                        <BeginStoryboard>
                                            <Storyboard TargetProperty="(Canvas.Left)">
                                                <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.4">
                                                    <SplineDoubleKeyFrame KeySpline="0.1,0 0.2,0.8" KeyTime="0:0:5" Value="300" />
                                                    <SplineDoubleKeyFrame KeySpline="0.2,0.8 0.4,0.6" KeyTime="0:0:10" Value="600" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Ellipse.Triggers>
                            </Ellipse>
                        </Canvas>
                    </GroupBox>
                </UniformGrid>
            </DockPanel>
        </TabItem>

        <TabItem Header="路径动画">
            <DockPanel LastChildFill="True">
                <TextBlock DockPanel.Dock="Top" TextWrapping="Wrap" Margin="8">
                    <Run Foreground="Red">* 基于路径的动画始终以恒定的速度运行。WPF通过分析路径的总长度和指定的持续时间来确定速度。</Run>                        
                </TextBlock>
                <Canvas>
                    <Path Stroke="Black">
                        <Path.Data>
                            <StaticResource ResourceKey="LeafPath"/>
                        </Path.Data>
                    </Path>

                    <Image>
                        <Image.Source>
                            <DrawingImage>
                                <DrawingImage.Drawing>
                                    <GeometryDrawing Brush="LightSteelBlue">
                                        <GeometryDrawing.Pen>
                                            <Pen Thickness="1" Brush="Red"/>
                                        </GeometryDrawing.Pen>
                                        <GeometryDrawing.Geometry>
                                            <GeometryGroup>
                                                <EllipseGeometry RadiusX="20" RadiusY="10" Center="20 20"/>
                                                <EllipseGeometry RadiusX="10" RadiusY="20" Center="20 20"/>
                                            </GeometryGroup>
                                        </GeometryDrawing.Geometry>
                                    </GeometryDrawing>
                                </DrawingImage.Drawing>
                            </DrawingImage>
                        </Image.Source>

                        <Image.Triggers>
                            <EventTrigger RoutedEvent="Loaded">
                                <BeginStoryboard>
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingPath Storyboard.TargetProperty="(Canvas.Left)"
                                                                  PathGeometry="{StaticResource LeafPath}"
                                                                  Source="X" Duration="0:0:10"/>
                                        <DoubleAnimationUsingPath Storyboard.TargetProperty="(Canvas.Top)"
                                                                  PathGeometry="{StaticResource LeafPath}"
                                                                  Source="Y" Duration="0:0:10"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Image.Triggers>
                    </Image>
                </Canvas>
            </DockPanel>
        </TabItem>
    </TabControl>
</Window>
