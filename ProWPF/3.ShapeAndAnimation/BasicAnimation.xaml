<Window x:Class="ProWPF.ShapeAndAnimation.BasicAnimation"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ProWPF.ShapeAndAnimation"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:b="clr-namespace:ProWPF.Behaviors"
        mc:Ignorable="d"
        Title="基础动画" Height="550" Width="820">

    <Window.Triggers>
        <EventTrigger SourceName="btnStart" RoutedEvent="Button.Click">
            <BeginStoryboard x:Name="storyboardBegin">
                <Storyboard TargetName="opacityMaskBrush" CurrentTimeInvalidated="Storyboard_CurrentTimeInvalidated">
                    <DoubleAnimation Storyboard.TargetProperty="GradientStops[0].Offset" From="0" To="1" Duration="0:0:5"/>
                    <DoubleAnimation Storyboard.TargetProperty="GradientStops[1].Offset" From="0" To="1.2" Duration="0:0:6"/>
                </Storyboard>
            </BeginStoryboard>
        </EventTrigger>

        <EventTrigger SourceName="btnPause" RoutedEvent="Button.Click">
            <PauseStoryboard BeginStoryboardName="storyboardBegin"/>
        </EventTrigger>

        <EventTrigger SourceName="btnResume" RoutedEvent="Button.Click">
            <ResumeStoryboard BeginStoryboardName="storyboardBegin"/>
        </EventTrigger>

        <EventTrigger SourceName="btnMoveTo" RoutedEvent="Button.Click">
            <SeekStoryboard BeginStoryboardName="storyboardBegin" Offset="0:0:2.5"/>
        </EventTrigger>
        
        <EventTrigger SourceName="btnStop" RoutedEvent="Button.Click">
            <StopStoryboard BeginStoryboardName="storyboardBegin"/>
        </EventTrigger>

        <EventTrigger SourceName="btnStartFrameRate" RoutedEvent="Button.Click">
            <BeginStoryboard>
                <Storyboard TargetName="ellipse" Timeline.DesiredFrameRate="{Binding ElementName=tbFrameRate, Path=Text, Mode=OneWay}">
                    <DoubleAnimation Storyboard.TargetProperty="(Canvas.Left)" From="0" To="600" Duration="0:0:10"/>
                    <DoubleAnimation Storyboard.TargetProperty="(Canvas.Top)" From="300" To="0" Duration="0:0:2.5"
                                                         DecelerationRatio="1" AutoReverse="True" RepeatBehavior="2x"/>
                </Storyboard>
            </BeginStoryboard>
        </EventTrigger>
    </Window.Triggers>

    <TabControl>
        <TabItem Header="简单动画">
            <UniformGrid Columns="2" ButtonBase.Click="UniformGrid_Click">
                <UniformGrid.Resources>
                    <Style TargetType="Button">
                        <Setter Property="Padding" Value="8"/>
                        <Setter Property="Margin" Value="8"/>
                        <Setter Property="Width" Value="300"/>
                        <Setter Property="Height" Value="64"/>
                    </Style>
                </UniformGrid.Resources>

                <Button x:Name="btn1" Content="按钮1"/>
                <Button x:Name="btn2" Content="按钮2"/>
                <Button x:Name="btn3" Content="按钮3"/>
                <Button x:Name="btn4" Content="按钮4"/>
                <Button x:Name="btn5" Content="按钮5"/>
                <Button x:Name="btn6" Content="按钮6"/>
            </UniformGrid>
        </TabItem>

        <TabItem Header="基础属性">
            <StackPanel>
                <GroupBox Header="Duration 动画持续时间" Margin="4">
                    <TextBlock Margin="4">
                        Duration.Automatic（默认值，将动画设置1秒的持续时间）
                        <LineBreak/>
                        Duration.Forever （使动画具有无限的持续时间）
                    </TextBlock>
                </GroupBox>

                <GroupBox Header="FillBehavior 动画结束行为" Margin="4">
                    <TextBlock Margin="4">
                        FillBehavior=HoldEnd，动画结束后，会继续为目标元素应用最后的值
                        <LineBreak/>
                        FillBehavior=Stop，动画结束后，目标元素会恢复至初值
                    </TextBlock>
                </GroupBox>

                <GroupBox Header="增速动画与减速动画" Margin="4">
                    <TextBlock Margin="4" TextWrapping="Wrap">
                        AcceleractionRation 动画开始时加速，DeceleractionRatio 动画结束时减速。这两个属性的值都在0~1之间，并且开始是都设置为0，两个属性之和不能超过1
                        <LineBreak/>
                        例：在一个持续10秒的动画中AcceleractionRatio=0.3，DeceleractionRaito=0.5，表示前3秒动画加速，后5秒动画减速，中间2秒动画保持最大速度
                        <LineBreak/>
                        如果将AcceleractionRatio设置为1，动画速度从开始到结束一直在增加，反之将DeceleractionRatio设置为1，动画速度从开始到结束一直在降低
                    </TextBlock>
                </GroupBox>

                <GroupBox Header="RepeatBehavior 动画重复" Margin="4">
                    <TextBlock Margin="4" TextWrapping="Wrap">
                        重复动画次数。例如动画重复两次 RepeatBehavior = new RepeatBehavior(2); 或XAML标签中设置RepeatBehavior="2x"
                        <LineBreak/>
                        重复的时间长度。例如一个时长5秒的动画，将RepeatBehavior设置为13秒将会引起两次完整的重复，然后通过第三次重复使得按钮处于3秒中的位置。
                        <LineBreak/>
                        可通过使用RepeatBehavior属性只执行部分动画，将重复次数设置为小数或使用小于持续时间Duration属性值的TimeSpan对象
                        <LineBreak/>
                        设置为RepeatBehavior.Forever将不断重复自身
                    </TextBlock>
                </GroupBox>
            </StackPanel>
        </TabItem>

        <TabItem Header="故事板">
            <Grid Margin="4">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <TextBlock Margin="4" TextWrapping="Wrap">
                    故事板：BeginAnimation()方法的XAML等价物。通过故事板将动画指定到合适的元素（Storyboard.TargetName）和属性（Storyboard.TargetProperty）。
                    <LineBreak/>
                    事件触发器：事件触发器响应属性变化或事件，并控制故事板。
                    <LineBreak/>
                    可在4个位置中定义事件触发器，在样式中（Styles.Triggers集合），在数据模板中（DataTemplate.Triggers集合），在控件模板中（ControlTemplate.Triggers集合），
                    在元素中（FrameworkElement.Triggers集合）。
                    <LineBreak/>
                    <Run Foreground="Red">FrameworkElement.Triggers 仅支持事件触发器</Run>
                    <LineBreak/>
                    重叠动画，决定第二个动画何时被应用到已经具有一个正在运行的动画的属性上。使用Storyboard.HandoffBehavior属性改变处理动画的方式。
                    <LineBreak/>
                    HandoffBehavior.SnapshotAndReplace表示“快照并替换”，当两个动画重叠时，第二个动画会立即覆盖第一个动画。
                    <LineBreak/>
                    HandoffBehavior.Compose 这种方式会将第二个动画融合到一个动画的时间线中。
                    <LineBreak/>
                    <Run Foreground="Red">使用组合的HandoffBehavior行为需要更大的开销。这是因为第二个动画开始时，用于运行原来动画的时钟不能被释放，
                    相反这个时钟会一直保存，直到被垃圾回收或相同的属性应用新的动画。可通过Completed事件中使用BeginAnimation()方法传递null引用替换动画。</Run>
                </TextBlock>

                <StackPanel Grid.Row="1" Margin="4" HorizontalAlignment="Center">
                    <Button Content="在元素中定义的事件触发器" Padding="10" Margin="10" Width="300">
                        <Button.Triggers>
                            <EventTrigger RoutedEvent="MouseEnter">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--不设置TargetName故事板默认使用其父元素，不设置Duration默认使用Duration.Automatic，1秒-->
                                        <DoubleAnimation Storyboard.TargetProperty="Width" To="30"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="MouseLeave">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--不设置To默认使用最后一次值-->
                                        <DoubleAnimation Storyboard.TargetProperty="Width"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Button.Triggers>
                    </Button>

                    <Button Content="在Style中使用属性触发器触发事件" Padding="10" Margin="10" Width="300">
                        <Button.Style>
                            <Style TargetType="Button">
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="Width" To="30"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="Width"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>

                    <Button Content="多次点击总时间线变化（SnapshotAndReplace）" Padding="10" Margin="10" Width="300">
                        <Button.Triggers>
                            <EventTrigger RoutedEvent="Button.Click">
                                <BeginStoryboard HandoffBehavior="SnapshotAndReplace">
                                    <Storyboard TargetProperty="Width">
                                        <DoubleAnimation To="30" Duration="0:0:3"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Button.Triggers>
                    </Button>

                    <Button Content="多次点击总时间线不变（Compose）" Padding="10" Margin="10" Width="300">
                        <Button.Triggers>
                            <EventTrigger RoutedEvent="Button.Click">
                                <BeginStoryboard HandoffBehavior="Compose">
                                    <Storyboard TargetProperty="Width">
                                        <DoubleAnimation To="30" Duration="0:0:3"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Button.Triggers>
                    </Button>
                </StackPanel>
            </Grid>
        </TabItem>

        <TabItem Header="动画控制">
            <Grid Margin="4">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <TextBlock Margin="8" TextWrapping="Wrap">
                    擦除效果；将新图像覆盖原图像，为新图像创建透明掩码。使用LinearGradientBrush画刷，将实色画刷定义在透明画刷之后，同时移动两个画刷的Offset，实现擦除效果。
                    <LineBreak/>
                    <Run Foreground="Red">* 所有的动画控制必须放置在用一个Triggers集合中。</Run>
                    <LineBreak/>
                    将EventTrigger.SourceName属性按钮的Name属性相匹配，触发器就会应用到该按钮上。
                    <LineBreak/>
                    更改动画速率时使用SpeedRatio属性只能更改下次动画运行的速率无法更改当前正在执行的动画速率。可使用SetSpeedRatio()方法仅更改当前执行的动画速率。
                    <LineBreak/>
                    Storyboard.CurrentTimeInvalidated事件，动画始终已经向前移动了一个步长或者正在改变动画，开始、停止和结束都会引发该事件。改事件的发送者是Clock对象，通过Clock对象检索当前时间，当前时间（CurrentTime）使用TimeSpan对象表示，当前进度（CurrentProgress）使用0~1之间的数值表示。
                </TextBlock>
                
                <Grid Margin="8" Grid.Row="1">
                    <Image Source="/Images/day.jpg"/>

                    <Image Source="/Images/night.jpg">
                        <Image.OpacityMask>
                            <LinearGradientBrush x:Name="opacityMaskBrush" StartPoint="0 0" EndPoint="1 1">
                                <GradientStop Color="Transparent" Offset="0"/>
                                <GradientStop Color="Black" Offset="0"/>
                            </LinearGradientBrush>
                        </Image.OpacityMask>
                    </Image>
                </Grid>
                
                <StackPanel Grid.Row="2" Orientation="Horizontal" Margin="4" HorizontalAlignment="Center">
                    <StackPanel.Resources>
                        <Style TargetType="Button">
                            <Setter Property="Margin" Value="8"/>
                            <Setter Property="Padding" Value="12,8"/>
                        </Style>
                    </StackPanel.Resources>
                    <Button x:Name="btnStart" Content="开始"/>
                    <Button x:Name="btnPause" Content="暂停"/>
                    <Button x:Name="btnResume" Content="继续"/>
                    <Button x:Name="btnStop" Content="停止"/>
                    <Button x:Name="btnMoveTo" Content="移动到中间"/>
                    <Button Content="快放" Click="SpeedRatio_Click"/>
                </StackPanel>

                <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Center">
                    <TextBlock x:Name="tbTime" Text="" MinWidth="50" Margin="0,0,10,0"/>
                    <ProgressBar x:Name="progressBar" Minimum="0" Maximum="1" Width="300" Height="10"/>
                </StackPanel>
            </Grid>
        </TabItem>

        <TabItem Header="动画性能">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <StackPanel Margin="8" Orientation="Horizontal">
                    <TextBlock Text="TimeLine.DesiredFrameRate 设置帧率（默认60帧）：" VerticalAlignment="Center"/>
                    <TextBox x:Name="tbFrameRate" Text="60" Width="50" Margin="8,0" VerticalAlignment="Center"/>
                    <Button x:Name="btnStartFrameRate" Content="开始" Padding="16,2"/>
                </StackPanel>

                <Canvas Grid.Row="1" ClipToBounds="True">
                    <Ellipse x:Name="ellipse" Fill="Yellow" Stroke="Blue" Width="50" Height="50" Canvas.Top="300"/>
                </Canvas>

                <TextBlock Grid.Row="3" Margin="8">
                    也可通过代码调整TimeLine.DesiredFrame属性。通过静态属性RenderCapability.Tier以确定显卡支持的渲染级别。
                </TextBlock>
            </Grid>
        </TabItem>

        <TabItem Header="位图缓存">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <TextBlock Margin="8" TextWrapping="Wrap">
                    位图缓存通知WPF获取内容的当前位图图像（内容快照），并将其复制到显卡的内存中。这时，显卡可以控制位图的操作和显示的刷新。
                    这个处理过程比WPF完成所有的工作要快很多，并且和显卡不断的通信。
                    <LineBreak/>
                    当启用位图缓存时。WPF采用元素当前尺寸的快照并将其位图复制到显卡中。如果之后使用ScaleTransform放大元素时会出现模糊状态。
                    可使用BitmapCache.RenderAtScale属性进行缩放设置。
                </TextBlock>

                <StackPanel Orientation="Horizontal" Grid.Row="1" ButtonBase.Click="CacheMode_Click">
                    <CheckBox x:Name="chxEnableCache" Content="位图缓存" Margin="8"/>
                    <CheckBox x:Name="chxScale" Content="缩放位图" Margin="8" Visibility="Hidden"/>
                </StackPanel>

                <GroupBox Grid.Row="2" Header="拖动方框">
                    <Canvas x:Name="canvas" ClipToBounds="True">
                        <Path x:Name="pathBackground" Stroke="Black"/>

                        <Path Stroke="Blue" Fill="Yellow">
                            <Path.Data>
                                <PathGeometry Figures="M 0,0 V 100 H 100 V 0 Z"/>
                            </Path.Data>
                            <i:Interaction.Behaviors>
                                <b:DragInCanvasBehavior/>
                            </i:Interaction.Behaviors>
                        </Path>
                    </Canvas>
                </GroupBox>
            </Grid>
        </TabItem>
    </TabControl>
</Window>
